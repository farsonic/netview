#!/home/linuxbrew/.linuxbrew/bin/python3

import os
import subprocess
import json
import sys
import re
from collections import defaultdict
from datetime import datetime


def get_ip_info():
    iface_info = {}
    ip_addr_output = subprocess.check_output(["ip", "-brief", "address"]).decode()
    for line in ip_addr_output.strip().splitlines():
        parts = line.split()
        if len(parts) < 3:
            continue
        iface, state, *rest = parts
        ip = next((r for r in rest if re.match(r"\d+\.\d+\.\d+\.\d+/", r)), "-")
        iface_info[iface] = {"ip": ip, "admin": state, "link": "-"}
    return iface_info


def get_linux_interfaces():
    iface_info = get_ip_info()
    ip_link_output = subprocess.check_output(["ip", "-details", "link"]).decode()
    current_iface = None

    for line in ip_link_output.strip().splitlines():
        if re.match(r'^\d+:\s+\S+:', line):
            m = re.match(r'^\d+:\s+(\S+):\s+<([^>]*)>.*mtu\s+(\d+).*', line)
            if m:
                iface_full, flags, mtu = m.groups()
                iface = iface_full.split('@')[0]
                current_iface = iface
                if iface not in iface_info:
                    iface_info[iface] = {"ip": "-", "admin": "-", "link": "-"}
                iface_info[iface]["mtu"] = mtu
                iface_info[iface]["link"] = "up" if "LOWER_UP" in flags else "down"
        elif 'link/' in line and current_iface:
            m = re.search(r'link/\S+\s+([0-9a-f:]{17})', line)
            if m:
                iface_info[current_iface]["mac"] = m.group(1)

    return iface_info


def get_linux_bridges():
    iface_info = get_ip_info()
    ip_link_output = subprocess.check_output(["ip", "-details", "link"]).decode()
    current_iface = None

    for line in ip_link_output.strip().splitlines():
        if re.match(r'^\d+:\s+\S+:', line):
            m = re.match(r'^\d+:\s+(\S+):.*mtu\s+(\d+).*', line)
            if m:
                iface_full, mtu = m.groups()
                iface = iface_full.split('@')[0]
                current_iface = iface
                if iface not in iface_info:
                    iface_info[iface] = {}
                iface_info[iface]["mtu"] = mtu
        elif 'link/' in line and current_iface:
            m = re.search(r'link/\S+\s+([0-9a-f:]{17})', line)
            if m:
                iface_info[current_iface]["mac"] = m.group(1)

    bridge_output = subprocess.check_output(["bridge", "link"]).decode()
    bridge_re = re.compile(
        r"^\d+:\s+(\S+):\s+<([^>]*)>\s+mtu\s+(\d+)\s+master\s+(\S+)\s+state\s+(\S+)\s+priority\s+(\d+)\s+cost\s+(\d+)"
    )

    bridges = defaultdict(lambda: {"type": "linux", "interfaces": [], "mac_table": []})

    for line in bridge_output.strip().splitlines():
        match = bridge_re.match(line)
        if match:
            iface_full, flags, mtu, bridge, state, prio, cost = match.groups()
            iface = iface_full.split('@')[0]
            info = iface_info.get(iface, {})
            bridges[bridge]["interfaces"].append({
                "name": iface_full,
                "state": "Up" if "UP" in flags else "Down",
                "mtu": info.get("mtu", "-"),
                "mac": info.get("mac", "-"),
                "ip": info.get("ip", "-"),
                "learning": "Enabled"
            })

    for bridge in bridges:
        bridge_ifaces = {i["name"].split("@")[0] for i in bridges[bridge]["interfaces"]}
        try:
            fdb_output = subprocess.check_output(["bridge", "fdb", "show", "br", bridge]).decode()
            shown = set()
            for line in fdb_output.strip().splitlines():
                match = re.match(r"^([0-9a-f:]{17})\s+dev\s+(\S+)", line)
                if match:
                    mac, dev = match.groups()
                    if dev not in bridge_ifaces or " self " in line:
                        continue
                    key = (mac, dev)
                    if key not in shown:
                        bridges[bridge]["mac_table"].append({
                            "mac": mac,
                            "interface": dev
                        })
                        shown.add(key)
        except subprocess.CalledProcessError:
            continue

    return bridges


def print_interface_summary(interfaces, iface_filter=None):
    print(f"{'Interface':<20}{'Admin':<8}{'Link':<8}{'Proto':<8}{'Local'}")
    for name in sorted(interfaces):
        if iface_filter and name != iface_filter:
            continue
        data = interfaces[name]
        print(f"{name:<20}{data.get('admin', '-'):<8}{data.get('link', '-'):<8}{'inet':<8}{data.get('ip', '-')}")


def print_interface_detail(interfaces, iface_filter):
    if iface_filter not in interfaces:
        print(f"Interface '{iface_filter}' not found.")
        return

    data = interfaces[iface_filter]
    now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    print(f"Physical interface: {iface_filter}, Enabled, Physical link is {data.get('link', '-')}")
    print(f"  MTU: {data.get('mtu', '-')}, Link-level type: Ethernet")
    print(f"  MAC address: {data.get('mac', '-')}  IP address: {data.get('ip', '-')}")
    print(f"  Statistics last updated: {now}")
    print("  Traffic statistics: (stubbed values)")
    print("    Input  bytes  : 0")
    print("    Output bytes  : 0")
    print("    Input  packets: 0")
    print("    Output packets: 0")
    print("  Input errors: 0, Output errors: 0")


def print_bridge_summary(bridges, bridge_filter=None):
    for name, data in sorted(bridges.items()):
        if bridge_filter and name != bridge_filter:
            continue
        print(f"\nBridge domain: {name}")
        print(f"  Type: {data['type']}     Interfaces: {len(data['interfaces'])}")
        print(f"    {'Interface':<18}{'State':<8}{'MTU':<6}{'MAC Address':<20}{'IP Address':<18}{'MAC learning'}")
        for intf in data['interfaces']:
            print(f"    {intf['name']:<18}{intf['state']:<8}{intf['mtu']:<6}{intf['mac']:<20}{intf['ip']:<18}{intf['learning']}")


def print_bridge_detail(bridges, bridge_filter):
    if bridge_filter not in bridges:
        print(f"Bridge '{bridge_filter}' not found.")
        return
    data = bridges[bridge_filter]
    print_bridge_summary(bridges, bridge_filter)
    print("\n  MAC Table:")
    print(f"    {'MAC Address':<20}{'Interface':<20}")
    for entry in data['mac_table']:
        print(f"    {entry['mac']:<20}{entry['interface']:<20}")


def print_json(data):
    print(json.dumps(data, indent=2))


def print_usage():
    print("Usage:")
    print("  netview interface [<interface>] [detail|display json]")
    print("  netview bridge [<bridge>] [detail|display json]")


if __name__ == '__main__':
    args = sys.argv[1:]

    if not args:
        print_usage()
        sys.exit(0)

    if args[0] == "interface":
        interfaces = get_linux_interfaces()
        if len(args) == 1:
            print_interface_summary(interfaces)
        elif len(args) == 2 and args[1] not in ("display", "json", "detail"):
            print_interface_summary(interfaces, args[1])
        elif len(args) == 3 and args[2] == "detail":
            print_interface_detail(interfaces, args[1])
        elif args[-2:] == ["display", "json"]:
            if len(args) == 3 and args[1] == "display":
                print_json(interfaces)
            elif len(args) == 4:
                iface_name = args[1]
                if iface_name in interfaces:
                    print_json({iface_name: interfaces[iface_name]})
                else:
                    print_json({"error": f"Interface '{iface_name}' not found"})
        else:
            print("Invalid interface command.")

    elif args[0] == "bridge":
        bridges = get_linux_bridges()
        if len(args) == 1:
            print_bridge_summary(bridges)
        elif len(args) == 2 and args[1] not in ("display", "json", "detail"):
            print_bridge_summary(bridges, args[1])
        elif len(args) == 3 and args[2] == "detail":
            print_bridge_detail(bridges, args[1])
        elif args[-2:] == ["display", "json"]:
            if len(args) == 3 and args[1] == "display":
                print_json(bridges)
            elif len(args) == 4:
                bridge_name = args[1]
                if bridge_name in bridges:
                    print_json({bridge_name: bridges[bridge_name]})
                else:
                    print_json({"error": f"Bridge '{bridge_name}' not found"})
        else:
            print("Invalid bridge command.")

    else:
        print_usage()
